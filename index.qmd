---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
theme: lux
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)


flu <- outbreaks::fluH7N9_china_2013
```

```{r}

total_cases <- flu %>% 
  summarize(total = n())

total_death <- flu %>% 
  filter(outcome == "Death") %>% 
  summarise(count = n())

total_hosp <- flu %>% 
  filter(!is.na(date_of_hospitalisation)) %>% 
  summarise(count = n())

```

```{r}

province_summary <- flu %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))


# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")

```


# HOME 

## Buttons {height=30%}

###
```{r}

value_box(
  title = "Total Cases",
  value = total_cases,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6"),
  p(paste0("(", total_cases, ")"))
)

```

###
```{r}

value_box(
  title = "Total Hospitalisations",
  value = total_hosp,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#27408B"),
  p(paste0("(", total_hosp, ")"))
)

```

###
```{r}

value_box(
  title = "Total Deaths",
  value = total_death,
  showcase = bsicons::bs_icon("file-medical"),
  theme = value_box_theme(bg = "#A2B5CD"),
  p(paste0("(", total_death, ")"))
)

```


## Maps {height=70%}

### Graph {width=30%}
```{r title = "Number of Cases by Province"}
top_province <- province_summary %>% 
  arrange(desc(total_cases)) %>% 
  mutate(tooltip_label = paste(province, 
                               total_cases, 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(province, total_cases), 
             x = total_cases, 
             fill = total_cases, 
             text = tooltip_label)) + 
  geom_col() + 
  geom_text(aes(label = total_cases), 
            nudge_x = 2, 
            color = "gray26"
            ) + 
  labs(x = "Number of Cases",
       y = " ") + 
  theme(legend.position = "none")

top_province_ggplotly <- 
  ggplotly(top_province, tooltip = "text")

top_province_ggplotly

```

### Graph {width=70%}
```{r title = "Map of Provinces by Number of Cases" }

china_map_plot_ggplotly

```


# DOWNLOAD DATA

The data used in this dashboard is shown below and can be downloaded as a CSV. 

```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(flu, 
              elementId = "flu-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('flu-table')")
  )
)
```